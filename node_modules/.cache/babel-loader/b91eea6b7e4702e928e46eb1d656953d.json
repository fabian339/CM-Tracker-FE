{"ast":null,"code":"import { SET_ADMIN, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_UNAUTHENTICATED, LOADING_ADMIN, STOP_LOADING_UI, SET_ORGANIZATION, MARCK_NOTIFICATIONS_READ, ADD_ORGANIZATION, SET_ORGANIZATIONS, LOADING_DATA } from '../types';\nimport { getSecrets } from './dataActions';\nimport axios from 'axios'; // export const loginUser = (userData, history) => (dispatch) => {\n//     dispatch({ type: LOADING_UI });\n//     axios.post('/login', userData)\n//     .then((res) => {\n//         setAuthorizationHeader(res.data.token);\n//         dispatch(getUserData());\n//         dispatch({ type: CLEAR_ERRORS});\n//         history.push('/');\n//     })\n//     .catch(err => {\n//       dispatch({\n//           type: SET_ERRORS,\n//           payload: err.response.data\n//       })\n//     });\n// }\n\nexport const adminRegistration = (newAdminData, history, newPath) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/registerAdmin', newAdminData).then(res => {\n    setAuthorizationHeader(res.data.token);\n    dispatch(getAdminData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push(newPath);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const registerOrg = (newOrgData, history, fullname) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/orgRegister', newOrgData).then(res => {\n    console.log(\"CALLED\");\n    dispatch({\n      type: ADD_ORGANIZATION,\n      payload: res.data\n    });\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n    history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    }); //   console.log(err.response)\n  });\n}; //get organization with name\n\nexport const getOrgWithName = (orgName, history, fullname) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(`/organization/${orgName}`).then(res => {\n    console.log(\"CALLED\");\n    dispatch({\n      type: SET_ORGANIZATION,\n      payload: res.data\n    });\n    dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n    history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    }); //   console.log(err.response)\n  });\n}; //get all organizations\n\nexport const getOrganizations = () => dispatch => {\n  // console.log(\"BEIN CALLED\");\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get('/organizations').then(res => {\n    dispatch({\n      type: SET_ORGANIZATIONS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_ORGANIZATIONS,\n      payload: []\n    });\n  });\n};\nexport const mergeAdminWithOrg = (fullname, orgId) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.put(`/merge/admin/${fullname}/organization/${orgId}`).then(res => {\n    console.log(res);\n    dispatch(getAdminData()); // dispatch({ type: CLEAR_ERRORS});\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // export const getOrgData = (orgId) => (dispatch) => {\n//     dispatch({ type: LOADING_UI });\n//     axios.get(`/organization/${orgId}`)\n//     .then((res) => {\n//         dispatch({\n//             type: SET_ORGANIZATION,\n//             payload: res.data\n//         });\n//         dispatch({ type: STOP_LOADING_UI })\n//     })\n//     .catch(err =>  console.log(err) );\n// }\n\nexport const logoutAdminUser = () => dispatch => {\n  localStorage.removeItem('FBIdToken');\n  delete axios.defaults.headers.common['Authorization'];\n  dispatch({\n    type: SET_UNAUTHENTICATED\n  });\n};\nexport const getAdminData = () => dispatch => {\n  dispatch({\n    type: LOADING_ADMIN\n  });\n  console.log(\"Calledd\");\n  axios.get('/admin').then(res => {\n    dispatch({\n      type: SET_ADMIN,\n      payload: res.data\n    }); // console.log(\"PayloadData-->\", res.data)\n  }).catch(err => {\n    console.log(err);\n  });\n}; // export const uploadImage = (formData) => (dispatch) => {\n//     // dispatch( { type: ON_IMAGE_CHANGE });\n//     dispatch({ type: LOADING_USER });\n//     axios.post('/user/image', formData)\n//     .then(() => {\n//         dispatch(getUserData());\n//         //refetch secrets from serve after 2 seconds to avoid incorrect data\n//         setTimeout(() => {dispatch(getSecrets(true))}, 2500);\n//     })\n//     .catch(err => console.log(err));\n// }\n// export const editUserDetails = (userDetails) => (dispatch) => {\n//     dispatch({ type: LOADING_USER});\n//     axios.post('/user', userDetails)\n//     .then(() => {\n//         dispatch(getUserData());\n//     })\n//     .catch(err => console.log(err));\n// }\n// export const markNotificationsRead = (notificationIds) => (dispatch) => {\n//     axios.post('/notifications', notificationIds)\n//     .then(res => {\n//         dispatch({ type: MARCK_NOTIFICATIONS_READ })\n//     })\n//     .catch(err => console.log(err));\n// }\n\nconst setAuthorizationHeader = token => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};","map":{"version":3,"sources":["/home/mikebladez/Documents/cm-tracker/CM-Tracker-FE/src/redux/actions/adminActions.js"],"names":["SET_ADMIN","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_UNAUTHENTICATED","LOADING_ADMIN","STOP_LOADING_UI","SET_ORGANIZATION","MARCK_NOTIFICATIONS_READ","ADD_ORGANIZATION","SET_ORGANIZATIONS","LOADING_DATA","getSecrets","axios","adminRegistration","newAdminData","history","newPath","dispatch","type","post","then","res","setAuthorizationHeader","data","token","getAdminData","push","catch","err","console","log","payload","response","registerOrg","newOrgData","fullname","mergeAdminWithOrg","orgId","getOrgWithName","orgName","get","getOrganizations","put","logoutAdminUser","localStorage","removeItem","defaults","headers","common","FBIdToken","setItem"],"mappings":"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","sourcesContent":["import { \n    SET_ADMIN, \n    SET_ERRORS, \n    CLEAR_ERRORS, \n    LOADING_UI, \n    SET_UNAUTHENTICATED, \n    LOADING_ADMIN,\n    STOP_LOADING_UI,\n    SET_ORGANIZATION, \n    MARCK_NOTIFICATIONS_READ,\n    ADD_ORGANIZATION,\n    SET_ORGANIZATIONS,\n    LOADING_DATA\n    \n    } from '../types';\n\n    import {getSecrets} from './dataActions'\n\nimport axios from 'axios';\n\n// export const loginUser = (userData, history) => (dispatch) => {\n//     dispatch({ type: LOADING_UI });\n//     axios.post('/login', userData)\n//     .then((res) => {\n//         setAuthorizationHeader(res.data.token);\n//         dispatch(getUserData());\n//         dispatch({ type: CLEAR_ERRORS});\n//         history.push('/');\n//     })\n//     .catch(err => {\n//       dispatch({\n//           type: SET_ERRORS,\n//           payload: err.response.data\n//       })\n\n//     });\n// }\n\n\nexport const adminRegistration = (newAdminData, history, newPath) => (dispatch) => {\n\n    dispatch({ type: LOADING_UI });\n    axios.post('/registerAdmin', newAdminData)\n    .then((res) => {\n        setAuthorizationHeader(res.data.token);\n        dispatch(getAdminData());\n        dispatch({ type: CLEAR_ERRORS});\n        history.push(newPath);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n\n    });\n}\n\nexport const registerOrg = (newOrgData, history, fullname) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/orgRegister', newOrgData)\n    .then((res) => {\n        console.log(\"CALLED\")\n        dispatch({\n            type: ADD_ORGANIZATION,\n            payload: res.data\n        });\n        dispatch({ type: CLEAR_ERRORS});\n        dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n        history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    //   console.log(err.response)\n    });\n}\n\n//get organization with name\nexport const getOrgWithName = (orgName, history, fullname) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.get(`/organization/${orgName}`)\n    .then((res) => {\n        console.log(\"CALLED\")\n        dispatch({\n            type: SET_ORGANIZATION,\n            payload: res.data\n        });\n        dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n        history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    //   console.log(err.response)\n    });\n}\n\n\n//get all organizations\nexport const getOrganizations = () => (dispatch) => {\n        // console.log(\"BEIN CALLED\");\n        dispatch( { type: LOADING_DATA });\n        axios.get('/organizations')\n        .then((res) => {\n            dispatch({\n                type: SET_ORGANIZATIONS,\n                payload: res.data\n            });\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ORGANIZATIONS,\n                payload: []\n            });\n        });\n    }\n\n\nexport const mergeAdminWithOrg = (fullname, orgId) => dispatch => {\n    dispatch({ type: LOADING_UI });\n    axios.put(`/merge/admin/${fullname}/organization/${orgId}`)\n    .then(res => {\n        console.log(res)\n        dispatch(getAdminData());\n        // dispatch({ type: CLEAR_ERRORS});\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    })\n}\n// export const getOrgData = (orgId) => (dispatch) => {\n//     dispatch({ type: LOADING_UI });\n//     axios.get(`/organization/${orgId}`)\n//     .then((res) => {\n//         dispatch({\n//             type: SET_ORGANIZATION,\n//             payload: res.data\n//         });\n//         dispatch({ type: STOP_LOADING_UI })\n//     })\n//     .catch(err =>  console.log(err) );\n// }\n\n\n\nexport const logoutAdminUser = () => (dispatch) => {\n    localStorage.removeItem('FBIdToken');\n    delete axios.defaults.headers.common['Authorization'];\n    dispatch({ type: SET_UNAUTHENTICATED });\n}\n\n\n\nexport const getAdminData = () => (dispatch) => {\n    dispatch({ type: LOADING_ADMIN });\n            console.log(\"Calledd\")\n    axios.get('/admin')\n    .then((res) => {\n        dispatch({\n            type: SET_ADMIN,\n            payload: res.data\n        })\n        // console.log(\"PayloadData-->\", res.data)\n    })\n    .catch(err => {\n        console.log(err);\n    })\n}\n\n\n// export const uploadImage = (formData) => (dispatch) => {\n//     // dispatch( { type: ON_IMAGE_CHANGE });\n//     dispatch({ type: LOADING_USER });\n//     axios.post('/user/image', formData)\n//     .then(() => {\n//         dispatch(getUserData());\n//         //refetch secrets from serve after 2 seconds to avoid incorrect data\n//         setTimeout(() => {dispatch(getSecrets(true))}, 2500);\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\n// export const editUserDetails = (userDetails) => (dispatch) => {\n//     dispatch({ type: LOADING_USER});\n\n//     axios.post('/user', userDetails)\n//     .then(() => {\n//         dispatch(getUserData());\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\n// export const markNotificationsRead = (notificationIds) => (dispatch) => {\n//     axios.post('/notifications', notificationIds)\n//     .then(res => {\n//         dispatch({ type: MARCK_NOTIFICATIONS_READ })\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\nconst setAuthorizationHeader = (token) => {\n    const FBIdToken = `Bearer ${token}`;\n    localStorage.setItem('FBIdToken', FBIdToken);\n    axios.defaults.headers.common['Authorization'] = FBIdToken;\n}"]},"metadata":{},"sourceType":"module"}