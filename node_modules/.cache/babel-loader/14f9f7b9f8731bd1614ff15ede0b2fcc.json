{"ast":null,"code":"import { SET_ADMIN, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_UNAUTHENTICATED_ADMIN, LOADING_ADMIN, STOP_LOADING_UI, SET_ORGANIZATION, MARCK_NOTIFICATIONS_READ, ADD_ORGANIZATION, SET_ORGANIZATIONS, LOADING_DATA } from '../types';\nimport { getUserData, logoutUser } from './userActions';\nimport axios from 'axios';\nexport const loginFunc = (userData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/login', userData).then(res => {\n    setAuthorizationHeader(res.data.token, res.data.accountType);\n\n    if (res.data.accountType === \"admin\") {\n      // console.log(\"Data Back\", res.data);\n      dispatch(getAdminData());\n      dispatch({\n        type: CLEAR_ERRORS\n      });\n      history.push(`/admin/${res.data.fullname}/modules`);\n    } else {\n      dispatch(getUserData());\n      dispatch({\n        type: CLEAR_ERRORS\n      });\n      history.push(`/user/${res.data.fullname}/page`);\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const adminRegistration = (newAdminData, history, newPath) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/registerAdmin', newAdminData).then(res => {\n    setAuthorizationHeader(res.data.token, 'admin');\n    dispatch(getAdminData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push(newPath);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const registerOrg = (newOrgData, history, fullname) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/orgRegister', newOrgData).then(res => {\n    console.log(\"CALLED\");\n    dispatch({\n      type: ADD_ORGANIZATION,\n      payload: res.data\n    });\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n    history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    }); //   console.log(err.response)\n  });\n}; //get organization with name\n\nexport const getOrgWithName = (orgName, history, fullname) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(`/organization/${orgName}`).then(res => {\n    console.log(\"CALLED\");\n    dispatch({\n      type: SET_ORGANIZATION,\n      payload: res.data\n    });\n    dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n    history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    }); //   console.log(err.response)\n  });\n}; //get all organizations\n\nexport const getOrganizations = () => dispatch => {\n  // console.log(\"BEIN CALLED\");\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get('/organizations').then(res => {\n    dispatch({\n      type: SET_ORGANIZATIONS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_ORGANIZATIONS,\n      payload: []\n    });\n  });\n};\nexport const mergeAdminWithOrg = (fullname, orgId) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.put(`/merge/admin/${fullname}/organization/${orgId}`).then(res => {\n    console.log(res);\n    dispatch(getAdminData()); // dispatch({ type: CLEAR_ERRORS});\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // export const getOrgData = (orgId) => (dispatch) => {\n//     dispatch({ type: LOADING_UI });\n//     axios.get(`/organization/${orgId}`)\n//     .then((res) => {\n//         dispatch({\n//             type: SET_ORGANIZATION,\n//             payload: res.data\n//         });\n//         dispatch({ type: STOP_LOADING_UI })\n//     })\n//     .catch(err =>  console.log(err) );\n// }\n\nexport const logoutAdmin = () => dispatch => {\n  if (localStorage.accType === \"admin\") {\n    localStorage.removeItem('FBIdToken');\n    delete axios.defaults.headers.common['Authorization'];\n    dispatch({\n      type: SET_UNAUTHENTICATED_ADMIN\n    });\n  } else {\n    dispatch(logoutUser());\n  }\n};\nexport const getAdminData = () => dispatch => {\n  dispatch({\n    type: LOADING_ADMIN\n  });\n  console.log(\"Calledd\");\n  axios.get('/admin').then(res => {\n    dispatch({\n      type: SET_ADMIN,\n      payload: res.data\n    }); // console.log(\"PayloadData-->\", res.data)\n  }).catch(err => {\n    console.log(err);\n  });\n}; // export const uploadImage = (formData) => (dispatch) => {\n//     // dispatch( { type: ON_IMAGE_CHANGE });\n//     dispatch({ type: LOADING_USER });\n//     axios.post('/user/image', formData)\n//     .then(() => {\n//         dispatch(getUserData());\n//         //refetch secrets from serve after 2 seconds to avoid incorrect data\n//         setTimeout(() => {dispatch(getSecrets(true))}, 2500);\n//     })\n//     .catch(err => console.log(err));\n// }\n// export const editUserDetails = (userDetails) => (dispatch) => {\n//     dispatch({ type: LOADING_USER});\n//     axios.post('/user', userDetails)\n//     .then(() => {\n//         dispatch(getUserData());\n//     })\n//     .catch(err => console.log(err));\n// }\n// export const markNotificationsRead = (notificationIds) => (dispatch) => {\n//     axios.post('/notifications', notificationIds)\n//     .then(res => {\n//         dispatch({ type: MARCK_NOTIFICATIONS_READ })\n//     })\n//     .catch(err => console.log(err));\n// }\n\nconst setAuthorizationHeader = (token, accType) => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  localStorage.setItem('accType', accType);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};","map":{"version":3,"sources":["/home/mikebladez/Documents/cm-tracker/CM-Tracker-FE/src/redux/actions/adminActions.js"],"names":["SET_ADMIN","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_UNAUTHENTICATED_ADMIN","LOADING_ADMIN","STOP_LOADING_UI","SET_ORGANIZATION","MARCK_NOTIFICATIONS_READ","ADD_ORGANIZATION","SET_ORGANIZATIONS","LOADING_DATA","getUserData","logoutUser","axios","loginFunc","userData","history","dispatch","type","post","then","res","setAuthorizationHeader","data","token","accountType","getAdminData","push","fullname","catch","err","payload","response","adminRegistration","newAdminData","newPath","console","log","registerOrg","newOrgData","mergeAdminWithOrg","orgId","getOrgWithName","orgName","get","getOrganizations","put","logoutAdmin","localStorage","accType","removeItem","defaults","headers","common","FBIdToken","setItem"],"mappings":"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","sourcesContent":["import { \n    SET_ADMIN, \n    SET_ERRORS, \n    CLEAR_ERRORS, \n    LOADING_UI, \n    SET_UNAUTHENTICATED_ADMIN, \n    LOADING_ADMIN,\n    STOP_LOADING_UI,\n    SET_ORGANIZATION, \n    MARCK_NOTIFICATIONS_READ,\n    ADD_ORGANIZATION,\n    SET_ORGANIZATIONS,\n    LOADING_DATA\n    \n    } from '../types';\n\n    import {getUserData, logoutUser} from './userActions'\n\nimport axios from 'axios';\n\nexport const loginFunc = (userData, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/login', userData)\n    .then((res) => {\n        setAuthorizationHeader(res.data.token, res.data.accountType);\n        if(res.data.accountType === \"admin\"){\n            // console.log(\"Data Back\", res.data);\n            dispatch(getAdminData());\n            dispatch({ type: CLEAR_ERRORS});\n            history.push(`/admin/${res.data.fullname}/modules`);\n        } else {\n            dispatch(getUserData());\n            dispatch({ type: CLEAR_ERRORS});\n            history.push(`/user/${res.data.fullname}/page`);\n        }\n    })\n    .catch(err => {\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n\n    });\n}\n\n\nexport const adminRegistration = (newAdminData, history, newPath) => (dispatch) => {\n\n    dispatch({ type: LOADING_UI });\n    axios.post('/registerAdmin', newAdminData)\n    .then((res) => {\n        setAuthorizationHeader(res.data.token, 'admin');\n        dispatch(getAdminData());\n        dispatch({ type: CLEAR_ERRORS});\n        history.push(newPath);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n\n    });\n}\n\nexport const registerOrg = (newOrgData, history, fullname) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/orgRegister', newOrgData)\n    .then((res) => {\n        console.log(\"CALLED\")\n        dispatch({\n            type: ADD_ORGANIZATION,\n            payload: res.data\n        });\n        dispatch({ type: CLEAR_ERRORS});\n        dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n        history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    //   console.log(err.response)\n    });\n}\n\n//get organization with name\nexport const getOrgWithName = (orgName, history, fullname) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.get(`/organization/${orgName}`)\n    .then((res) => {\n        console.log(\"CALLED\")\n        dispatch({\n            type: SET_ORGANIZATION,\n            payload: res.data\n        });\n        dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n        history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    //   console.log(err.response)\n    });\n}\n\n\n//get all organizations\nexport const getOrganizations = () => (dispatch) => {\n        // console.log(\"BEIN CALLED\");\n        dispatch( { type: LOADING_DATA });\n        axios.get('/organizations')\n        .then((res) => {\n            dispatch({\n                type: SET_ORGANIZATIONS,\n                payload: res.data\n            });\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ORGANIZATIONS,\n                payload: []\n            });\n        });\n    }\n\n\nexport const mergeAdminWithOrg = (fullname, orgId) => dispatch => {\n    dispatch({ type: LOADING_UI });\n    axios.put(`/merge/admin/${fullname}/organization/${orgId}`)\n    .then(res => {\n        console.log(res)\n        dispatch(getAdminData());\n        // dispatch({ type: CLEAR_ERRORS});\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    })\n}\n// export const getOrgData = (orgId) => (dispatch) => {\n//     dispatch({ type: LOADING_UI });\n//     axios.get(`/organization/${orgId}`)\n//     .then((res) => {\n//         dispatch({\n//             type: SET_ORGANIZATION,\n//             payload: res.data\n//         });\n//         dispatch({ type: STOP_LOADING_UI })\n//     })\n//     .catch(err =>  console.log(err) );\n// }\n\n\n\nexport const logoutAdmin = () => (dispatch) => {\n    if (localStorage.accType === \"admin\"){\n        localStorage.removeItem('FBIdToken');\n        delete axios.defaults.headers.common['Authorization'];\n        dispatch({ type: SET_UNAUTHENTICATED_ADMIN });\n    } else {\n        dispatch(logoutUser());\n    }\n}\n\n\n\nexport const getAdminData = () => (dispatch) => {\n    dispatch({ type: LOADING_ADMIN });\n            console.log(\"Calledd\")\n    axios.get('/admin')\n    .then((res) => {\n        dispatch({\n            type: SET_ADMIN,\n            payload: res.data\n        })\n        // console.log(\"PayloadData-->\", res.data)\n    })\n    .catch(err => {\n        console.log(err);\n    })\n}\n\n\n// export const uploadImage = (formData) => (dispatch) => {\n//     // dispatch( { type: ON_IMAGE_CHANGE });\n//     dispatch({ type: LOADING_USER });\n//     axios.post('/user/image', formData)\n//     .then(() => {\n//         dispatch(getUserData());\n//         //refetch secrets from serve after 2 seconds to avoid incorrect data\n//         setTimeout(() => {dispatch(getSecrets(true))}, 2500);\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\n// export const editUserDetails = (userDetails) => (dispatch) => {\n//     dispatch({ type: LOADING_USER});\n\n//     axios.post('/user', userDetails)\n//     .then(() => {\n//         dispatch(getUserData());\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\n// export const markNotificationsRead = (notificationIds) => (dispatch) => {\n//     axios.post('/notifications', notificationIds)\n//     .then(res => {\n//         dispatch({ type: MARCK_NOTIFICATIONS_READ })\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\nconst setAuthorizationHeader = (token, accType) => {\n    const FBIdToken = `Bearer ${token}`;\n    localStorage.setItem('FBIdToken', FBIdToken);\n    localStorage.setItem('accType', accType);\n    axios.defaults.headers.common['Authorization'] = FBIdToken;\n}"]},"metadata":{},"sourceType":"module"}