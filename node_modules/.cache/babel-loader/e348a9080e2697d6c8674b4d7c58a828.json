{"ast":null,"code":"import { SET_USER, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_UNAUTHENTICATED, LOADING_USER // MARCK_NOTIFICATIONS_READ,\n} from '../types';\nimport { getSecrets } from './dataActions';\nimport axios from 'axios';\nexport const loginUser = (userData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/login', userData).then(res => {\n    setAuthorizationHeader(res.data.token);\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push('/');\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const adminRegistration = (newUserData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  }); // axios.post('/signup', newUserData)\n  // .then((res) => {\n  //     setAuthorizationHeader(res.data.token);\n  //     dispatch(getUserData());\n  //     dispatch({ type: CLEAR_ERRORS});\n  //     history.push('/');\n  // })\n  // .catch(err => {\n  //   dispatch({\n  //       type: SET_ERRORS,\n  //       payload: err.response.data\n  //   })\n  // });\n};\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('FBIdToken');\n  delete axios.defaults.headers.common['Authorization'];\n  dispatch({\n    type: SET_UNAUTHENTICATED\n  });\n};\nexport const getUserData = () => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.get('/user').then(res => {\n    dispatch({\n      type: SET_USER,\n      payload: res.data\n    }); // console.log(\"PayloadData-->\", res.data)\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const uploadImage = formData => dispatch => {\n  // dispatch( { type: ON_IMAGE_CHANGE });\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post('/user/image', formData).then(() => {\n    dispatch(getUserData()); //refetch secrets from serve after 2 seconds to avoid incorrect data\n\n    setTimeout(() => {\n      dispatch(getSecrets(true));\n    }, 2500);\n  }).catch(err => console.log(err));\n};\nexport const editUserDetails = userDetails => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post('/user', userDetails).then(() => {\n    dispatch(getUserData());\n  }).catch(err => console.log(err));\n}; // export const markNotificationsRead = (notificationIds) => (dispatch) => {\n//     axios.post('/notifications', notificationIds)\n//     .then(res => {\n//         dispatch({ type: MARCK_NOTIFICATIONS_READ })\n//     })\n//     .catch(err => console.log(err));\n// }\n\nconst setAuthorizationHeader = token => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};","map":{"version":3,"sources":["/Users/mrfabian/Documents/cm-tracker-project/CM-Tracker-FE/src/redux/actions/userActions.js"],"names":["SET_USER","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_UNAUTHENTICATED","LOADING_USER","getSecrets","axios","loginUser","userData","history","dispatch","type","post","then","res","setAuthorizationHeader","data","token","getUserData","push","catch","err","payload","response","adminRegistration","newUserData","logoutUser","localStorage","removeItem","defaults","headers","common","get","console","log","uploadImage","formData","setTimeout","editUserDetails","userDetails","FBIdToken","setItem"],"mappings":"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","sourcesContent":["import { \n    SET_USER, \n    SET_ERRORS, \n    CLEAR_ERRORS, \n    LOADING_UI, \n    SET_UNAUTHENTICATED, \n    LOADING_USER, \n    // MARCK_NOTIFICATIONS_READ,\n    } from '../types';\n\n    import {getSecrets} from './dataActions'\n\nimport axios from 'axios';\n\nexport const loginUser = (userData, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/login', userData)\n    .then((res) => {\n        setAuthorizationHeader(res.data.token);\n        dispatch(getUserData());\n        dispatch({ type: CLEAR_ERRORS});\n        history.push('/');\n    })\n    .catch(err => {\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n\n    });\n}\n\n\nexport const adminRegistration = (newUserData, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    // axios.post('/signup', newUserData)\n    // .then((res) => {\n    //     setAuthorizationHeader(res.data.token);\n    //     dispatch(getUserData());\n    //     dispatch({ type: CLEAR_ERRORS});\n    //     history.push('/');\n    // })\n    // .catch(err => {\n    //   dispatch({\n    //       type: SET_ERRORS,\n    //       payload: err.response.data\n    //   })\n\n    // });\n}\n\n\n\nexport const logoutUser = () => (dispatch) => {\n    localStorage.removeItem('FBIdToken');\n    delete axios.defaults.headers.common['Authorization'];\n    dispatch({ type: SET_UNAUTHENTICATED });\n}\n\n\n\nexport const getUserData = () => (dispatch) => {\n    dispatch({ type: LOADING_USER });\n    axios.get('/user')\n    .then((res) => {\n        dispatch({\n            type: SET_USER,\n            payload: res.data\n        })\n        // console.log(\"PayloadData-->\", res.data)\n    })\n    .catch(err => {\n        console.log(err);\n    })\n}\n\nexport const uploadImage = (formData) => (dispatch) => {\n    // dispatch( { type: ON_IMAGE_CHANGE });\n    dispatch({ type: LOADING_USER });\n    axios.post('/user/image', formData)\n    .then(() => {\n        dispatch(getUserData());\n        //refetch secrets from serve after 2 seconds to avoid incorrect data\n        setTimeout(() => {dispatch(getSecrets(true))}, 2500);\n    })\n    .catch(err => console.log(err));\n}\n\n\nexport const editUserDetails = (userDetails) => (dispatch) => {\n    dispatch({ type: LOADING_USER});\n\n    axios.post('/user', userDetails)\n    .then(() => {\n        dispatch(getUserData());\n    })\n    .catch(err => console.log(err));\n}\n\n\n// export const markNotificationsRead = (notificationIds) => (dispatch) => {\n//     axios.post('/notifications', notificationIds)\n//     .then(res => {\n//         dispatch({ type: MARCK_NOTIFICATIONS_READ })\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\nconst setAuthorizationHeader = (token) => {\n    const FBIdToken = `Bearer ${token}`;\n    localStorage.setItem('FBIdToken', FBIdToken);\n    axios.defaults.headers.common['Authorization'] = FBIdToken;\n}"]},"metadata":{},"sourceType":"module"}