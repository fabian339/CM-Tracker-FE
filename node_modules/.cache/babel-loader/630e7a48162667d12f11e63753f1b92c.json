{"ast":null,"code":"import { SET_ADMIN, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_AUTHENTICATED_ADMIN, SET_UNAUTHENTICATED_ADMIN, SET_AUTHENTICATED_USER, LOADING_ADMIN, STOP_LOADING_UI, SET_ORGANIZATION, MARCK_NOTIFICATIONS_READ, ADD_ORGANIZATION, SET_ORGANIZATIONS, LOADING_DATA } from '../types';\nimport { getUserData, logoutUser } from './userActions';\nimport axios from 'axios';\nexport const loginFunc = (data, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/login', data).then(res => {\n    // console.log(res.data)\n    setAuthorizationHeader(res.data.token, res.data.accountType, res.data.fullname);\n\n    if (res.data.accountType === \"admin\") {\n      console.log(\"Data Back\", res.data.fullname, \"History\", history);\n      console.log(\"Called\", \"getAdminData\");\n      dispatch(getAdminData(res.data.fullname));\n      let pathName = `/admin/${res.data.fullname}/modules`;\n      dispatch({\n        type: CLEAR_ERRORS\n      });\n      history.push(pathName);\n    } // } else {\n    //     dispatch(getUserData());\n    //     dispatch({\n    //         type: SET_AUTHENTICATED_ADMIN,\n    //         payload: res.data.fullame\n    //     });\n    //     dispatch({ type: CLEAR_ERRORS});\n    //     history.push(`/user/${res.data.fullname}/page`);\n    // }\n\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const getAdminData = fullname => dispatch => {\n  dispatch({\n    type: LOADING_ADMIN\n  }); //HEREEE\n\n  console.log(\"this call\", fullname);\n  axios.get(`/admin/${fullname}`).then(res => {\n    dispatch({\n      type: SET_ADMIN,\n      payload: res.data\n    });\n    dispatch({\n      type: SET_AUTHENTICATED_ADMIN\n    }); // console.log(\"PayloadData-->\", res.data)\n  }).catch(err => {\n    console.log(err.response.data);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const adminRegistration = (newAdminData, history, newPath) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/registerAdmin', newAdminData).then(res => {\n    setAuthorizationHeader(res.data.token, res.data.accountType, res.data.fullname);\n    console.log(\"DATAA\", res.data);\n    dispatch(getAdminData(res.data.fullname));\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push(newPath);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const registerOrg = (newOrgData, history, fullname) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/orgRegister', newOrgData).then(res => {\n    console.log(\"CALLED\");\n    dispatch({\n      type: ADD_ORGANIZATION,\n      payload: res.data\n    });\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n    let pathName = `/merge/admin/${fullname}/organization/${res.data.orgId}`; // dispatch({\n    //     type: SET_AUTHENTICATED_PATHNAMES,\n    //     payload: pathName\n    // })\n\n    history.push(pathName);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    }); //   console.log(err.response)\n  });\n}; //get organization with name\n\nexport const getOrgWithName = (orgName, history, fullname) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(`/organization/${orgName}`).then(res => {\n    console.log(\"CALLED\");\n    dispatch({\n      type: SET_ORGANIZATION,\n      payload: res.data\n    });\n    dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n    let pathName = `/merge/admin/${fullname}/organization/${res.data.orgId}`; // dispatch({\n    //     type: SET_AUTHENTICATED_PATHNAMES,\n    //     payload: pathName\n    // })\n\n    history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    }); //   console.log(err.response)\n  });\n}; //get all organizations\n\nexport const getOrganizations = () => dispatch => {\n  // console.log(\"BEIN CALLED\");\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get('/organizations').then(res => {\n    dispatch({\n      type: SET_ORGANIZATIONS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_ORGANIZATIONS,\n      payload: []\n    });\n  });\n};\nexport const mergeAdminWithOrg = (fullname, orgId) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  console.log(\"Called\", \"getAdminData\");\n  axios.put(`/merge/admin/${fullname}/organization/${orgId}`).then(res => {\n    console.log(res);\n    dispatch(getAdminData(fullname)); // dispatch({ type: CLEAR_ERRORS});\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // export const getOrgData = (orgId) => (dispatch) => {\n//     dispatch({ type: LOADING_UI });\n//     axios.get(`/organization/${orgId}`)\n//     .then((res) => {\n//         dispatch({\n//             type: SET_ORGANIZATION,\n//             payload: res.data\n//         });\n//         dispatch({ type: STOP_LOADING_UI })\n//     })\n//     .catch(err =>  console.log(err) );\n// }\n\nexport const logoutAdmin = () => dispatch => {\n  if (localStorage.accType === \"admin\") {\n    localStorage.removeItem('FBIdToken');\n    delete axios.defaults.headers.common['Authorization'];\n    dispatch({\n      type: SET_UNAUTHENTICATED_ADMIN\n    });\n  } else {\n    dispatch(logoutUser());\n  }\n\n  localStorage.removeItem('accType');\n  localStorage.removeItem('fullname');\n}; // export const uploadImage = (formData) => (dispatch) => {\n//     // dispatch( { type: ON_IMAGE_CHANGE });\n//     dispatch({ type: LOADING_USER });\n//     axios.post('/user/image', formData)\n//     .then(() => {\n//         dispatch(getUserData());\n//         //refetch secrets from serve after 2 seconds to avoid incorrect data\n//         setTimeout(() => {dispatch(getSecrets(true))}, 2500);\n//     })\n//     .catch(err => console.log(err));\n// }\n// export const editUserDetails = (userDetails) => (dispatch) => {\n//     dispatch({ type: LOADING_USER});\n//     axios.post('/user', userDetails)\n//     .then(() => {\n//         dispatch(getUserData());\n//     })\n//     .catch(err => console.log(err));\n// }\n// export const markNotificationsRead = (notificationIds) => (dispatch) => {\n//     axios.post('/notifications', notificationIds)\n//     .then(res => {\n//         dispatch({ type: MARCK_NOTIFICATIONS_READ })\n//     })\n//     .catch(err => console.log(err));\n// }\n\nconst setAuthorizationHeader = (token, accType, fullname) => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  localStorage.setItem('accType', accType);\n  localStorage.setItem('fullname', fullname);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};","map":{"version":3,"sources":["/home/mikebladez/Documents/cm-tracker/CM-Tracker-FE/src/redux/actions/adminActions.js"],"names":["SET_ADMIN","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_AUTHENTICATED_ADMIN","SET_UNAUTHENTICATED_ADMIN","SET_AUTHENTICATED_USER","LOADING_ADMIN","STOP_LOADING_UI","SET_ORGANIZATION","MARCK_NOTIFICATIONS_READ","ADD_ORGANIZATION","SET_ORGANIZATIONS","LOADING_DATA","getUserData","logoutUser","axios","loginFunc","data","history","dispatch","type","post","then","res","setAuthorizationHeader","token","accountType","fullname","console","log","getAdminData","pathName","push","catch","err","payload","response","get","adminRegistration","newAdminData","newPath","registerOrg","newOrgData","mergeAdminWithOrg","orgId","getOrgWithName","orgName","getOrganizations","put","logoutAdmin","localStorage","accType","removeItem","defaults","headers","common","FBIdToken","setItem"],"mappings":"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","sourcesContent":["import { \n    SET_ADMIN, \n    SET_ERRORS, \n    CLEAR_ERRORS, \n    LOADING_UI, \n    SET_AUTHENTICATED_ADMIN,\n    SET_UNAUTHENTICATED_ADMIN, \n    SET_AUTHENTICATED_USER,\n    LOADING_ADMIN,\n    STOP_LOADING_UI,\n    SET_ORGANIZATION, \n    MARCK_NOTIFICATIONS_READ,\n    ADD_ORGANIZATION,\n    SET_ORGANIZATIONS,\n    LOADING_DATA,\n    \n    } from '../types';\n\n    import {getUserData, logoutUser} from './userActions'\n\nimport axios from 'axios';\n\nexport const loginFunc = (data, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/login', data)\n    .then((res) => {\n        // console.log(res.data)\n        setAuthorizationHeader(res.data.token, res.data.accountType, res.data.fullname);\n        if(res.data.accountType === \"admin\"){\n            console.log(\"Data Back\", res.data.fullname, \"History\", history);\n            console.log(\"Called\", \"getAdminData\")\n            dispatch(getAdminData(res.data.fullname));\n            let pathName = `/admin/${res.data.fullname}/modules`;\n            dispatch({ type: CLEAR_ERRORS});\n            history.push(pathName);\n        }\n        // } else {\n        //     dispatch(getUserData());\n        //     dispatch({\n        //         type: SET_AUTHENTICATED_ADMIN,\n        //         payload: res.data.fullame\n        //     });\n        //     dispatch({ type: CLEAR_ERRORS});\n        //     history.push(`/user/${res.data.fullname}/page`);\n        // }\n    })\n    .catch(err => {\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n\n    });\n}\n\n\nexport const getAdminData = (fullname) => (dispatch) => {\n    dispatch({ type: LOADING_ADMIN });\n    //HEREEE\n    console.log(\"this call\", fullname);\n\n    axios.get(`/admin/${fullname}`)\n    .then((res) => {\n        dispatch({\n            type: SET_ADMIN,\n            payload: res.data\n        })\n        dispatch({type: SET_AUTHENTICATED_ADMIN});\n        // console.log(\"PayloadData-->\", res.data)\n    })\n    .catch(err => {\n        console.log(err.response.data)\n        dispatch({\n            type: SET_ERRORS,\n            payload: err.response.data\n        })\n    })\n}\n\nexport const adminRegistration = (newAdminData, history, newPath) => (dispatch) => {\n\n    dispatch({ type: LOADING_UI });\n    axios.post('/registerAdmin', newAdminData)\n    .then((res) => {\n        setAuthorizationHeader(res.data.token, res.data.accountType, res.data.fullname);\n        console.log(\"DATAA\", res.data)\n        dispatch(getAdminData(res.data.fullname));\n        dispatch({ type: CLEAR_ERRORS});\n        history.push(newPath);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n\n    });\n}\n\nexport const registerOrg = (newOrgData, history, fullname) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/orgRegister', newOrgData)\n    .then((res) => {\n        console.log(\"CALLED\")\n        dispatch({\n            type: ADD_ORGANIZATION,\n            payload: res.data\n        });\n        dispatch({ type: CLEAR_ERRORS});\n        dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n        let pathName = `/merge/admin/${fullname}/organization/${res.data.orgId}`;\n        // dispatch({\n        //     type: SET_AUTHENTICATED_PATHNAMES,\n        //     payload: pathName\n        // })\n        history.push(pathName);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    //   console.log(err.response)\n    });\n}\n\n//get organization with name\nexport const getOrgWithName = (orgName, history, fullname) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.get(`/organization/${orgName}`)\n    .then((res) => {\n        console.log(\"CALLED\")\n        dispatch({\n            type: SET_ORGANIZATION,\n            payload: res.data\n        });\n        dispatch(mergeAdminWithOrg(fullname, res.data.orgId));\n        let pathName = `/merge/admin/${fullname}/organization/${res.data.orgId}`;\n        // dispatch({\n        //     type: SET_AUTHENTICATED_PATHNAMES,\n        //     payload: pathName\n        // })\n        history.push(`/merge/admin/${fullname}/organization/${res.data.orgId}`);\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    //   console.log(err.response)\n    });\n}\n\n\n//get all organizations\nexport const getOrganizations = () => (dispatch) => {\n        // console.log(\"BEIN CALLED\");\n        dispatch( { type: LOADING_DATA });\n        axios.get('/organizations')\n        .then((res) => {\n            dispatch({\n                type: SET_ORGANIZATIONS,\n                payload: res.data\n            });\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ORGANIZATIONS,\n                payload: []\n            });\n        });\n    }\n\n\nexport const mergeAdminWithOrg = (fullname, orgId) => dispatch => {\n    dispatch({ type: LOADING_UI });\n    console.log(\"Called\", \"getAdminData\")\n\n    axios.put(`/merge/admin/${fullname}/organization/${orgId}`)\n    .then(res => {\n        console.log(res)\n        dispatch(getAdminData(fullname));\n        // dispatch({ type: CLEAR_ERRORS});\n    })\n    .catch(err => {\n        console.log(err)\n      dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n      })\n    })\n}\n// export const getOrgData = (orgId) => (dispatch) => {\n//     dispatch({ type: LOADING_UI });\n//     axios.get(`/organization/${orgId}`)\n//     .then((res) => {\n//         dispatch({\n//             type: SET_ORGANIZATION,\n//             payload: res.data\n//         });\n//         dispatch({ type: STOP_LOADING_UI })\n//     })\n//     .catch(err =>  console.log(err) );\n// }\n\n\n\nexport const logoutAdmin = () => (dispatch) => {\n    if (localStorage.accType === \"admin\"){\n        localStorage.removeItem('FBIdToken');\n        delete axios.defaults.headers.common['Authorization'];\n        dispatch({ type: SET_UNAUTHENTICATED_ADMIN });\n    } else {\n        dispatch(logoutUser());\n    }\n    localStorage.removeItem('accType');\n    localStorage.removeItem('fullname');\n}\n\n\n\n\n// export const uploadImage = (formData) => (dispatch) => {\n//     // dispatch( { type: ON_IMAGE_CHANGE });\n//     dispatch({ type: LOADING_USER });\n//     axios.post('/user/image', formData)\n//     .then(() => {\n//         dispatch(getUserData());\n//         //refetch secrets from serve after 2 seconds to avoid incorrect data\n//         setTimeout(() => {dispatch(getSecrets(true))}, 2500);\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\n// export const editUserDetails = (userDetails) => (dispatch) => {\n//     dispatch({ type: LOADING_USER});\n\n//     axios.post('/user', userDetails)\n//     .then(() => {\n//         dispatch(getUserData());\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\n// export const markNotificationsRead = (notificationIds) => (dispatch) => {\n//     axios.post('/notifications', notificationIds)\n//     .then(res => {\n//         dispatch({ type: MARCK_NOTIFICATIONS_READ })\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\nconst setAuthorizationHeader = (token, accType, fullname) => {\n    const FBIdToken = `Bearer ${token}`;\n    localStorage.setItem('FBIdToken', FBIdToken);\n    localStorage.setItem('accType', accType);\n    localStorage.setItem('fullname', fullname);\n    axios.defaults.headers.common['Authorization'] = FBIdToken;\n}"]},"metadata":{},"sourceType":"module"}